// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  tipo      String // ADMIN, ATENDENTE
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  empresaId Int     @map("empresa_id")
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  atendente Atendente?

  @@map("usuarios")
}

model Servico {
  id             Int      @id @default(autoincrement())
  nome           String
  descricao      String?
  preco          Decimal  @db.Decimal(10, 2)
  duracaoMinutos Int      @map("duracao_minutos")
  ativo          Boolean  @default(true)
  empresaId      Int      @default(1) @map("empresa_id")
  empresa        Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  agendamentos Agendamento[]

  @@map("servicos")
}

model Atendente {
  id             Int      @id @default(autoincrement())
  usuarioId      Int      @unique @map("usuario_id")
  empresaId      Int      @map("empresa_id")
  nome           String
  especialidades String[] // Array de strings (Postgres aceita)
  corAgenda      String   @map("cor_agenda")
  ativo          Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  empresa      Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  usuario      Usuario       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  agendamentos Agendamento[]

  @@map("atendentes")
}

model Agendamento {
  id              Int      @id @default(autoincrement())
  empresaId       Int      @map("empresa_id")
  empresa         Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  clienteId       Int      @map("cliente_id")
  atendenteId     Int      @map("atendente_id")
  servicoId       Int      @map("servico_id")
  clienteNome     String
  clienteTelefone String
  clienteEmail    String?
  clienteObs      String?
  dataHora        DateTime @map("data_hora")
  status          String   @default("CONFIRMADO")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  servico   Servico   @relation(fields: [servicoId], references: [id])
  atendente Atendente @relation(fields: [atendenteId], references: [id])

  @@map("agendamentos")
}

model Empresa {
  id            Int      @id @default(autoincrement())
  nome          String
  slogan        String?
  logoUrl       String?  @map("logo_url")
  telefone      String?
  whatsapp      String?
  email         String?
  endereco      String?
  corPrincipal  String   @default("#ec4899") @map("cor_principal")
  corSecundaria String   @default("#9333ea") @map("cor_secundaria")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  usuarios     Usuario[]
  servicos     Servico[]
  atendentes   Atendente[]
  agendamentos Agendamento[]

  @@map("empresas")
}
